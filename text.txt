import React, { useState, useEffect } from 'react';
import DashboardLayout from "../../components/layouts/DashboardLayout";
import { LuChevronRight, LuClock } from 'react-icons/lu';

const MockTest = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [timeRemaining, setTimeRemaining] = useState(25 * 60); // 25 minutes in seconds

  // Mock data - replace with your actual data
  const mockData = {
    course: "BCA",
    topics: "C, Math, python, Networking",
    totalMarks: 20,
    totalQuestions: 20,
    totalTime: "25 min",
    questions: [
      {
        id: 1,
        question: "Which programming language is primarily used in machine learning?",
        options: [
          { id: 'A', text: 'C++' },
          { id: 'B', text: 'Ruby' },
          { id: 'C', text: 'Python' },
          { id: 'D', text: 'Html' }
        ],
        correctAnswer: 'C'
      },
      {
        id: 2,
        question: "What is #include?",
        options: [
          { id: 'A', text: 'A preprocessor directive' },
          { id: 'B', text: 'A function' },
          { id: 'C', text: 'A variable' },
          { id: 'D', text: 'A comment' }
        ],
        correctAnswer: 'A'
      },
      {
        id: 3,
        question: "What is python?",
        options: [
          { id: 'A', text: 'A snake' },
          { id: 'B', text: 'A programming language' },
          { id: 'C', text: 'A database' },
          { id: 'D', text: 'An operating system' }
        ],
        correctAnswer: 'B'
      },
      {
        id: 4,
        question: "What is Computer Networking?",
        options: [
          { id: 'A', text: 'Connecting computers together' },
          { id: 'B', text: 'Installing software' },
          { id: 'C', text: 'Hardware repair' },
          { id: 'D', text: 'Data storage' }
        ],
        correctAnswer: 'A'
      }
    ]
  };

  // Timer effect
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeRemaining(prev => {
        if (prev <= 0) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // Format time to MM:SS
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const handleNextQuestion = () => {
    if (currentQuestion < mockData.questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer('');
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setSelectedAnswer('');
    }
  };

  const handleOptionSelect = (optionId) => {
    setSelectedAnswer(optionId);
  };

  const currentQuestionData = mockData.questions[currentQuestion];

  return (
    <DashboardLayout>
      <div className="min-h-screen bg-transparent p-4">
        <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-6 h-full">
          
          {/* Left Panel - Course Info & Questions List */}
          <div className="bg-[#1e1e3f]/80 backdrop-blur-sm rounded-2xl p-6 border border-purple-500/20">
            {/* Course Header */}
            <div className="mb-6">
              <h1 className="text-2xl md:text-3xl font-bold text-white mb-2">
                Course: <span className="text-purple-400">{mockData.course}</span>
              </h1>
              <p className="text-gray-300 text-sm md:text-base mb-4">
                <span className="text-purple-300">Topics:</span> {mockData.topics}
              </p>
              
              {/* Stats Pills */}
              <div className="flex flex-wrap gap-3">
                <div className="bg-purple-900/50 border border-purple-500/50 rounded-full px-4 py-2">
                  <span className="text-purple-300 text-sm font-medium">
                    Total marks: {mockData.totalMarks}
                  </span>
                </div>
                <div className="bg-purple-900/50 border border-purple-500/50 rounded-full px-4 py-2">
                  <span className="text-purple-300 text-sm font-medium">
                    {mockData.totalQuestions} Q&A
                  </span>
                </div>
                <div className="bg-purple-900/50 border border-purple-500/50 rounded-full px-4 py-2">
                  <span className="text-purple-300 text-sm font-medium">
                    Total Time: {mockData.totalTime}
                  </span>
                </div>
              </div>
            </div>

            {/* Questions List */}
            <div className="space-y-3">
              {mockData.questions.map((question, index) => (
                <div
                  key={question.id}
                  className={`flex items-center justify-between p-4 rounded-xl cursor-pointer transition-all duration-200 ${
                    currentQuestion === index
                      ? 'bg-purple-600/30 border border-purple-500'
                      : 'bg-gray-800/50 border border-gray-600/30 hover:bg-gray-700/50'
                  }`}
                  onClick={() => setCurrentQuestion(index)}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-white font-medium">
                      {index + 1}.
                    </span>
                    <span className="text-gray-300 text-sm truncate">
                      {question.question.length > 50 
                        ? `${question.question.substring(0, 50)}...`
                        : question.question
                      }
                    </span>
                  </div>
                  <LuChevronRight className="text-gray-400 flex-shrink-0" />
                </div>
              ))}
            </div>
          </div>

          {/* Right Panel - Current Question */}
          <div className="bg-[#1e1e3f]/80 backdrop-blur-sm rounded-2xl p-6 border border-purple-500/20">
            {/* Timer Header */}
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-2">
                <span className="text-purple-300 text-sm font-medium">Mock Interview Test</span>
              </div>
              <div className="flex items-center space-x-2 bg-red-900/50 border border-red-500/50 rounded-full px-4 py-2">
                <LuClock className="text-red-400" size={16} />
                <span className="text-red-400 font-mono font-bold">
                  {formatTime(timeRemaining)}
                </span>
              </div>
            </div>

            {/* Question */}
            <div className="mb-8">
              <h2 className="text-xl md:text-2xl font-semibold text-white leading-relaxed italic">
                {currentQuestionData.question}
              </h2>
            </div>

            {/* Options */}
            <div className="space-y-4 mb-8">
              {currentQuestionData.options.map((option) => (
                <button
                  key={option.id}
                  onClick={() => handleOptionSelect(option.id)}
                  className={`w-full p-4 rounded-xl text-left transition-all duration-200 border ${
                    selectedAnswer === option.id
                      ? 'bg-purple-600/30 border-purple-500 text-white'
                      : 'bg-gray-800/50 border-gray-600/30 text-gray-300 hover:bg-gray-700/50 hover:border-gray-500/50'
                  }`}
                >
                  <span className="font-medium mr-3">{option.id}.</span>
                  <span>{option.text}</span>
                </button>
              ))}
            </div>

            {/* Navigation Buttons */}
            <div className="flex justify-between">
              <button
                onClick={handlePreviousQuestion}
                disabled={currentQuestion === 0}
                className="px-6 py-3 bg-gray-700/50 border border-gray-600/50 rounded-xl text-white font-medium transition-all duration-200 hover:bg-gray-600/50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Previous
              </button>
              
              <button
                onClick={handleNextQuestion}
                disabled={currentQuestion === mockData.questions.length - 1}
                className="px-6 py-3 bg-purple-600 border border-purple-500 rounded-xl text-white font-medium transition-all duration-200 hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Next
              </button>
            </div>

            {/* Progress Indicator */}
            <div className="mt-6">
              <div className="flex justify-between text-sm text-gray-400 mb-2">
                <span>Question {currentQuestion + 1} of {mockData.questions.length}</span>
                <span>{Math.round(((currentQuestion + 1) / mockData.questions.length) * 100)}% Complete</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div 
                  className="bg-purple-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${((currentQuestion + 1) / mockData.questions.length) * 100}%` }}
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
};

export default MockTest;

#f0ffd0